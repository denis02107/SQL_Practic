CREATE TABLE Type_Shoes
(
    ID_Code_Type_Shoes INT GENERATED BY DEFAULT AS IDENTITY,
    Title_Type_Shoes VARCHAR(50) not null,
    CONSTRAINT PK_Type_Shoes PRIMARY KEY (ID_Code_Type_Shoes),
    CONSTRAINT UQ_Title_Type_Shoes UNIQUE (Title_Type_Shoes)
);

CREATE TABLE Buyer (
    ID_Code_Buyer INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Name_Buyer VARCHAR(50) NOT NULL,
    Surname_Buyer VARCHAR(50) NOT NULL,
    Adress VARCHAR(50) NOT NULL,
    End_Date DATE DEFAULT SYSDATE,
    CVV INT NOT NULL CONSTRAINT CH_CVV CHECK (CVV > 0),
    Contact_Phone_Number VARCHAR(19) NOT NULL,
    CONSTRAINT PK_Buyer PRIMARY KEY (ID_Code_Buyer),
    CONSTRAINT UQ_Contact_Phone_Number UNIQUE (Contact_Phone_Number),
    CONSTRAINT CH_Contact_Phone_Number CHECK (REGEXP_LIKE(Contact_Phone_Number, '\+7\([0-9]{3}\)[0-9]{3} [0-9]{2} [0-9]{2}')),
    Email_Addres VARCHAR(50) NOT NULL,
    CONSTRAINT UQ_Email_Addres UNIQUE (Email_Addres)
);

CREATE TABLE Type_Season (
    ID_Code_Type_Season INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Title_Season VARCHAR(50) NOT NULL,
    CONSTRAINT PK_Type_Season PRIMARY KEY (ID_Code_Type_Season),
    CONSTRAINT UQ_Title_Season UNIQUE (Title_Season)
);

CREATE TABLE Type_Product (
    ID_Code_Type_Product INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Quantity_Type_Product INT NOT NULL,
    CONSTRAINT PK_Type_Product PRIMARY KEY (ID_Code_Type_Product)
);

CREATE TABLE Manufacturer (
    ID_Code_Manufacturer INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Title_Manufacturer VARCHAR(50) NOT NULL,
    CONSTRAINT PK_Manufacturer PRIMARY KEY (ID_Code_Manufacturer)
);
CREATE TABLE Courier (
    ID_Code_Courier INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Where_From_Couriel VARCHAR(50) NOT NULL,
    Where_Courier VARCHAR(50) NOT NULL,
    Formation_Act INT NOT NULL,
    CONSTRAINT PK_Courier PRIMARY KEY (ID_Code_Courier)
);

CREATE TABLE Employer (
    ID_Code_Employer INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Name_Employer VARCHAR(50) NOT NULL,
    Surname_Employer VARCHAR(50) NOT NULL,
    CONSTRAINT PK_Employer PRIMARY KEY (ID_Code_Employer)
);

CREATE TABLE Models (
    ID_Code_Models INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Sizes INT NOT NULL,
    Image VARCHAR(50) NOT NULL,
    Quantity_Model INT NOT NULL,
    Warranty_Period INT NOT NULL,
    Code_Manufacturer_ID INT NOT NULL,
    Code_Employer_ID INT NOT NULL,
    CONSTRAINT PK_Models PRIMARY KEY (ID_Code_Models),
    CONSTRAINT FK_Models_Manufacturer FOREIGN KEY (Code_Manufacturer_ID) REFERENCES Manufacturer (ID_Code_Manufacturer),
    CONSTRAINT FK_Models_Employer FOREIGN KEY (Code_Employer_ID) REFERENCES Employer (ID_Code_Employer)
);

CREATE TABLE Product 
(
    ID_Code_Product INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Amount_Product INT NOT NULL,
    Title_Product VARCHAR(50) NOT NULL,
    Quantity_Product INT NOT NULL,
    Code_Type_Shoes_ID INT NOT NULL,
    Code_Type_Season_ID INT NOT NULL,
    Code_Models_ID INT NOT NULL,
    Code_Type_Product_ID INT NOT NULL,
    CONSTRAINT PK_Product PRIMARY KEY (ID_Code_Product),
    CONSTRAINT FK_Product_Type_Shoes FOREIGN KEY (Code_Type_Shoes_ID) REFERENCES Type_Shoes (ID_Code_Type_Shoes),
    CONSTRAINT FK_Product_Type_Season FOREIGN KEY (Code_Type_Season_ID) REFERENCES Type_Season (ID_Code_Type_Season),
    CONSTRAINT FK_Product_Models FOREIGN KEY (Code_Models_ID) REFERENCES Models (ID_Code_Models),
    CONSTRAINT FK_Product_Type_Product FOREIGN KEY (Code_Type_Product_ID) REFERENCES Type_Product (ID_Code_Type_Product)
);


CREATE TABLE Bank_card_details
(
    ID_Code_Bank_card_details INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Numbers INT NOT NULL,
    Code_Buyer_ID INT NOT NULL,
    CONSTRAINT PK_Bank_card_details PRIMARY KEY (ID_Code_Bank_card_details),
    CONSTRAINT FK_Bank_card_details_Buyer FOREIGN KEY (Code_Buyer_ID) REFERENCES Buyer (ID_Code_Buyer)
);

CREATE TABLE Orders
(
    ID_Code_Orders INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Number_Orders INT NOT NULL,
    Total_Price DECIMAL(38,2) DEFAULT(0.0),
    Code_bank_card_details_ID INT NOT NULL,
    Code_Courier_ID INT NOT NULL,
    CONSTRAINT PK_Orders PRIMARY KEY (ID_Code_Orders),
    CONSTRAINT CH_Total_Price CHECK(Total_Price>=0.0),
    CONSTRAINT FK_Orders_bank_card_details FOREIGN KEY (Code_bank_card_details_ID) REFERENCES bank_card_details (ID_Code_bank_card_details),
    CONSTRAINT FK_Orders_Courier FOREIGN KEY (Code_Courier_ID) REFERENCES Courier (ID_Code_Courier)
);

CREATE TABLE Marriage_Fixation
(
    ID_Code_Marriage_Fixation INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Date_Time_Marriage_Fixation TIMESTAMP DEFAULT(CURRENT_TIMESTAMP),
    Code_Orders_ID INT NOT NULL,
    CONSTRAINT PK_Marriage_Fixation PRIMARY KEY (ID_Code_Marriage_Fixation),
    CONSTRAINT FK_Marriage_Fixation_Orders FOREIGN KEY (Code_Orders_ID) REFERENCES Orders (ID_Code_Orders)
);

CREATE TABLE Structured
(
    ID_Code_Structured INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Title_Structured VARCHAR(50) NOT NULL,
    Code_Product_ID INT NOT NULL,
    Code_Orders_ID INT NOT NULL,
    CONSTRAINT PK_Structured PRIMARY KEY (ID_Code_Structured),
    CONSTRAINT FK_Structured_Product FOREIGN KEY (Code_Product_ID) REFERENCES Product (ID_Code_Product),
    CONSTRAINT FK_Structured_Orders FOREIGN KEY (Code_Orders_ID) REFERENCES Orders (ID_Code_Orders)
);

CREATE TABLE Estimate
(
    ID_Code_Estimate INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Estimate_Number INT NOT NULL,
    Contract_Number_Estimate INT NOT NULL,
    Code_Employer_ID INT NOT NULL,
    CONSTRAINT PK_Estimate PRIMARY KEY (ID_Code_Estimate),
    CONSTRAINT FK_Estimate_Employer FOREIGN KEY (Code_Employer_ID) REFERENCES Employer (ID_Code_Employer)
);

CREATE TABLE Act
(
    ID_Code_Act INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Numbers INT NOT NULL,
    Date_Time_Act TIMESTAMP DEFAULT(CURRENT_Timestamp),
    Code_Estimate_ID INT NOT NULL,
    Code_Product_ID INT NOT NULL,
    CONSTRAINT PK_Act PRIMARY KEY (ID_Code_Act),
    CONSTRAINT FK_Act_Estimate FOREIGN KEY (Code_Estimate_ID) REFERENCES Estimate (ID_Code_Estimate),
    CONSTRAINT FK_Act_Product FOREIGN KEY (Code_Product_ID) REFERENCES Product (ID_Code_Product)
);

CREATE TABLE Reception
(
    ID_Code_Reception INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Contract_Number_Reception INT NOT NULL,
    Email_Address VARCHAR(50) NOT NULL,
    Telephone VARCHAR(19) NOT NULL, 
    Code_Estimate_ID NOT NULL,
    Code_Product_ID NOT NULL,
    CONSTRAINT PK_Reception PRIMARY KEY (ID_Code_Reception),
    CONSTRAINT UQ_Telephone UNIQUE (Telephone),
    CONSTRAINT CH_Telephone CHECK (REGEXP_LIKE(Telephone, '\+7\([0-9]{3}\)[0-9]{3} [0-9]{2} [0-9]{2}')),
    CONSTRAINT FK_Reception_Estimate FOREIGN KEY (Code_Estimate_ID) REFERENCES Estimate (ID_Code_Estimate),
    CONSTRAINT FK_Reception_Product FOREIGN KEY (Code_Product_ID) REFERENCES Product (ID_Code_Product)
);

CREATE TABLE Sale
(
    ID_Code_Sale INT GENERATED ALWAYS AS IDENTITY NOT NULL,
    Receipt_Number INT NOT NULL,
    Date_Time_Sale TIMESTAMP DEFAULT(CURRENT_Timestamp),
    Code_bank_card_details_ID INT NOT NULL,
    Code_Product_ID INT NOT NULL,
    Code_Estimate_ID INT NOT NULL,
    CONSTRAINT PK_Sale PRIMARY KEY (ID_Code_Sale),
    CONSTRAINT FK_Sale_bank_card_details FOREIGN KEY (Code_bank_card_details_ID) REFERENCES bank_card_details (ID_Code_bank_card_details),
    CONSTRAINT FK_Sale_Product FOREIGN KEY (Code_Product_ID) REFERENCES Product (ID_Code_Product),
    CONSTRAINT FK_Sale_Estimate FOREIGN KEY (Code_Estimate_ID) REFERENCES Estimate (ID_Code_Estimate)
);

SELECT count(*) from SYS.all_tables 
where owner = 'SALE_DEV';

SELECT table_Name, count(column_Name) from sys.all_tab_columns 
where owner = 'SALE_DEV'
group by table_Name;

Insert into type_Shoes(Title_Type_Shoes) VALUES ('Зимняя');
Insert into type_Shoes(Title_Type_Shoes) VALUES ('Летняя');
Insert into type_Shoes(Title_Type_Shoes) VALUES ('Осенняя');
Insert into type_Shoes(Title_Type_Shoes) VALUES ('Весенняя');

Insert into Buyer(Name_Buyer,Surname_Buyer,Adress,End_Date,CVV,Contact_Phone_Number, Email_Addres) VALUES ('Денис', 'Юсупов', 'Дверная 6/6',  '02.10.2005', '132', '+7(912)333 44 22', 'denisusupov228@gmail.com');
Insert into Buyer(Name_Buyer,Surname_Buyer,Adress,End_Date,CVV,Contact_Phone_Number, Email_Addres) VALUES ('Азамат', 'Юсупов', 'Гайкина 6/6',  '02.09.2003', '155', '+7(126)393 44 22', 'enisusupov300@gmail.com'); 
Insert into Buyer(Name_Buyer,Surname_Buyer,Adress,End_Date,CVV,Contact_Phone_Number, Email_Addres) VALUES ('Даня', 'Ботов', 'Забивная',  '03.10.2012', '666', '+7(912)395 43 22', 'nescam228@gmail.com');
Insert into Buyer(Name_Buyer,Surname_Buyer,Adress,End_Date,CVV,Contact_Phone_Number, Email_Addres) VALUES ('Артем', 'Дербий', 'Вереновы 11',  '11.11.2014', '777', '+7(666)633 44 22', 'gosuslugi12@gmail.com');

Insert into Type_Season(Title_Season) VALUES('Первый');
Insert into Type_Season(Title_Season) VALUES('Второй');
Insert into Type_Season(Title_Season) VALUES('Третий');
Insert into Type_Season(Title_Season) VALUES('Четвертый');

Insert into Type_Product (Quantity_Type_Product) VALUES (13);
Insert into Type_Product (Quantity_Type_Product) VALUES (15);
Insert into Type_Product (Quantity_Type_Product) VALUES (16);
Insert into Type_Product (Quantity_Type_Product) VALUES (17);

Insert into Manufacturer(Title_Manufacturer) VALUES('ООО Дирижабль');
Insert into Manufacturer(Title_Manufacturer) VALUES('ООО Светение');
Insert into Manufacturer(Title_Manufacturer) VALUES('ООО Лупа');
Insert into Manufacturer(Title_Manufacturer) VALUES('ООО Ткани');

Insert into Courier(Where_From_Couriel, Where_Courier, Formation_Act) VALUES ('Ленина 51', 'Мельникова 1/2','334521351');
Insert into Courier(Where_From_Couriel, Where_Courier, Formation_Act) VALUES ('Римская 91', 'Шакалова 33','555334123');
Insert into Courier(Where_From_Couriel, Where_Courier, Formation_Act) VALUES ('Каралева 8/10', 'Замосковье 2','132435465');
Insert into Courier(Where_From_Couriel, Where_Courier, Formation_Act) VALUES ('Винная 3', 'Межмкадная 3','127893111');

Insert into Employer(Name_Employer, Surname_Employer) VALUES ('Вася', 'Ребельцов');
Insert into Employer(Name_Employer, Surname_Employer) VALUES ('Петя', 'Петров');
Insert into Employer(Name_Employer, Surname_Employer) VALUES ('Рузвель', 'Паганини');
Insert into Employer(Name_Employer, Surname_Employer) VALUES ('Даня', 'Данилов');

Insert into Models(Sizes,Image,Quantity_Model,Warranty_Period,Code_Manufacturer_ID,Code_Employer_ID) VALUES ('35','fqwerrq12','11','14','1','1');
Insert into Models(Sizes,Image,Quantity_Model,Warranty_Period,Code_Manufacturer_ID,Code_Employer_ID) VALUES ('36','gqwefdsa','103','28','2','2');
Insert into Models(Sizes,Image,Quantity_Model,Warranty_Period,Code_Manufacturer_ID,Code_Employer_ID) VALUES ('37','fqblwebglq','23','7','3','3');
Insert into Models(Sizes,Image,Quantity_Model,Warranty_Period,Code_Manufacturer_ID,Code_Employer_ID) VALUES ('38','fgggggg12','14','14','4','4');

Insert into Product(Amount_Product,Title_Product,Quantity_Product,Code_Type_Shoes_ID,Code_Type_Season_ID,Code_Models_ID,Code_Type_Product_ID) VALUES ('1000','Лабутены','12','1','1','1','1');
Insert into Product(Amount_Product,Title_Product,Quantity_Product,Code_Type_Shoes_ID,Code_Type_Season_ID,Code_Models_ID,Code_Type_Product_ID) VALUES ('2000','Дольчегабана','13','2','2','2','2');
Insert into Product(Amount_Product,Title_Product,Quantity_Product,Code_Type_Shoes_ID,Code_Type_Season_ID,Code_Models_ID,Code_Type_Product_ID) VALUES ('3100','Баленсиага','16','3','3','3','3');
Insert into Product(Amount_Product,Title_Product,Quantity_Product,Code_Type_Shoes_ID,Code_Type_Season_ID,Code_Models_ID,Code_Type_Product_ID) VALUES ('10000','Гуччишуси','100','4','4','4','4');

Insert into Bank_card_details(Numbers,Code_Buyer_ID) VALUES ('45345658','1');
Insert into Bank_card_details(Numbers,Code_Buyer_ID) VALUES ('45341158','2');
Insert into Bank_card_details(Numbers,Code_Buyer_ID) VALUES ('11342658','2');
Insert into Bank_card_details(Numbers,Code_Buyer_ID) VALUES ('11345658','2');

Insert into Orders(Number_Orders,Total_Price,Code_bank_card_details_ID,Code_Courier_ID) VALUES('1324','123,2','1','1');
Insert into Orders(Number_Orders,Total_Price,Code_bank_card_details_ID,Code_Courier_ID) VALUES('1124','1233,54','2','2');
Insert into Orders(Number_Orders,Total_Price,Code_bank_card_details_ID,Code_Courier_ID) VALUES('1024','2223,5','3','3');
Insert into Orders(Number_Orders,Total_Price,Code_bank_card_details_ID,Code_Courier_ID) VALUES('924','999,11','4','4');

Insert into Marriage_Fixation(Date_Time_Marriage_Fixation,Code_Orders_ID)VALUES('12.10.2000','1');
Insert into Marriage_Fixation(Date_Time_Marriage_Fixation,Code_Orders_ID)VALUES('13.10.2000','2');
Insert into Marriage_Fixation(Date_Time_Marriage_Fixation,Code_Orders_ID)VALUES('14.10.2000','3');
Insert into Marriage_Fixation(Date_Time_Marriage_Fixation,Code_Orders_ID)VALUES('15.10.2000','4');

Insert into Structured(Title_Structured, Code_Product_ID, Code_Orders_ID) VALUES('ООО вишня','1','1');
Insert into Structured(Title_Structured, Code_Product_ID, Code_Orders_ID) VALUES('ООО грозамоды','2','2');
Insert into Structured(Title_Structured, Code_Product_ID, Code_Orders_ID) VALUES('ООО винтаж','3','3');
Insert into Structured(Title_Structured, Code_Product_ID, Code_Orders_ID) VALUES('ООО вишня','4','4');

Insert into Estimate(Estimate_Number,Contract_Number_Estimate,Code_Employer_ID) VALUES('1999','1230','1');
Insert into Estimate(Estimate_Number,Contract_Number_Estimate,Code_Employer_ID) VALUES('12444','1231','2');
Insert into Estimate(Estimate_Number,Contract_Number_Estimate,Code_Employer_ID) VALUES('9263','1232','3');
Insert into Estimate(Estimate_Number,Contract_Number_Estimate,Code_Employer_ID) VALUES('144','1233','4');

Insert into Act(Numbers, Date_Time_Act, Code_Estimate_ID, Code_Product_ID) VALUES('13636','10.12.2016','1','1');
Insert into Act(Numbers, Date_Time_Act, Code_Estimate_ID, Code_Product_ID) VALUES('13635','20.11.2016','2','2');
Insert into Act(Numbers, Date_Time_Act, Code_Estimate_ID, Code_Product_ID) VALUES('13634','21.10.2016','3','3');
Insert into Act(Numbers, Date_Time_Act, Code_Estimate_ID, Code_Product_ID) VALUES('13637','25.11.2016','4','4');

Insert into Reception(Contract_Number_Reception, Email_Address, Telephone, Code_Estimate_ID, Code_Product_ID) VALUES ('1000011','denisusupov333@gmail.com','+7(918)911 12 22','1','1');
Insert into Reception(Contract_Number_Reception, Email_Address, Telephone, Code_Estimate_ID, Code_Product_ID) VALUES ('1000012','denisusupov123@gmail.com','+7(910)111 12 22','2','2');
Insert into Reception(Contract_Number_Reception, Email_Address, Telephone, Code_Estimate_ID, Code_Product_ID) VALUES ('1000010','denisusupov999@gmail.com','+7(912)555 35 35','3','3');
Insert into Reception(Contract_Number_Reception, Email_Address, Telephone, Code_Estimate_ID, Code_Product_ID) VALUES ('1000013','deniv113@gmail.com','+7(925)512 82 32','4','4');

Insert into Sale(Receipt_Number, Date_Time_Sale, Code_bank_card_details_ID, Code_Product_ID,Code_Estimate_ID) VALUES ('100','11.05.2023','1','1','1');
Insert into Sale(Receipt_Number, Date_Time_Sale, Code_bank_card_details_ID, Code_Product_ID,Code_Estimate_ID) VALUES ('101','12.05.2023','2','2','2');
Insert into Sale(Receipt_Number, Date_Time_Sale, Code_bank_card_details_ID, Code_Product_ID,Code_Estimate_ID) VALUES ('106','14.05.2023','3','3','3');
Insert into Sale(Receipt_Number, Date_Time_Sale, Code_bank_card_details_ID, Code_Product_ID,Code_Estimate_ID) VALUES ('999','13.05.2023','4','4','4');

Select Numbers as "Номер Заказа", Total_Price as "Итоговая цена" from Orders inner join bank_card_details on Code_bank_card_details_ID = ID_Code_bank_card_details inner join Courier on Code_Courier_ID = ID_Code_Courier order by Numbers ASC;
SELECT Title_Type_Shoes as "Название типа обуви" from type_shoes order by Title ASC;
Select Name_Buyer as "Имя покупателя", Surname_Buyer as "Фамилия покупателя", End_Date as "Конечный адресс", CVV as "ЦВВ", Contact_Phone_Number as "Контактный телефон", Email_Addres as "Емаил адресс" from Buyer order by Name_Buyer ASC;
Select Title_Season as "Название сезона" from Type_Season order by Title_Season ASC;
Select Quantity as "Количество" from Type_Product order by Quantity ASC;
Select Title as "Название Производителя" from Manufacturer order by Title ASC;
Select Formation_Act as "Номер акта", Where_From_Couriel as "Откуда", Where_Courier as "Куда" from Courier order by Formation_Act ASC;
Select Name_Employer as "Имя работника", Surname_Employer as "Фамилия работника" from Employer order by Name_Employer ASC;
Select Quantity as "Количество обуви", Sizes as "Размер", Image as "Картинка обуви", Warranty_Period as "Гарантийный срок" from Models inner join Manufacturer on Code_Manufacturer_ID = ID_Code_Manufacturer inner join Employer on Code_Employer_ID = ID_Code_Employer order by Quantity ASC;
Select  Title as "Название продукта", Amount as "Цена продукта", Quantity as "Количество продукта" from Product inner join Type_Shoes on Code_Type_Shoes_ID = ID_Code_Type_Shoes inner join Type_Season on Code_Type_Season_ID = ID_Code_Type_Season inner join Models on Code_Models_ID = ID_Code_Models inner join Type_Product on Code_Type_Product_ID = ID_Code_Type_Product order by Title ASC;
SELECT * from Product;
Select Numbers as "Номер банковской карты" from Bank_card_details inner join Buyer on Code_Buyer_ID = ID_Code_Buyer order by Numbers ASC;
Select Numbers as "Номер Заказа", Total_Price as "Итоговая цена" from Orders inner join bank_card_details on Code_bank_card_details_ID = ID_Code_bank_card_details inner join Courier on Code_Courier_ID = ID_Code_Courier order by Numbers ASC;
Select Date_Time_Marriage_Fixation as "Время" from Marriage_Fixation inner join Orders on Code_Orders_ID = ID_Code_Orders order by Date_Time_Marriage_Fixation ASC;
Select Title as "Название структуры" from Structured inner join Product on Code_Product_ID = ID_Code_Product inner join Orders on Code_Orders_ID = ID_Code_Orders order by Title ASC;
Select Estimate_Number as "Номер сметы",Contract_Number as "Номер контракта" from Estimate inner join Employer on Code_Employer_ID = ID_Code_Employer order by Estimate_Number ASC;
Select Numbers as "Номер акта", Date_Time_Act as "Дата акта" from Act inner join Estimate on Code_Estimate_ID = ID_Code_Estimate inner join Product on Code_Product_ID = ID_Code_Product order by Date_Time_Act ASC;
Select Contract_Number as "Номер контракта", Email_Address as "Электронная почта", Telephone as "Номер телефона" from Reception inner join Estimate on Code_Estimate_ID = ID_Code_Estimate inner join Product on Code_Product_ID = ID_Code_Product order by Contract_Number ASC;
Select Receipt_Number as "Номер чека", Date_Time_Sale as "Дата продажи" from Sale inner join Bank_Card_details on Code_bank_card_details_ID = ID_Code_Bank_Card_details inner join Product on Code_Product_ID = ID_Code_Product inner join Estimate on Code_Estimate_ID = ID_Code_Estimate order by Receipt_Number ASC;

update Type_Shoes set Title = 'Бархатный' where ID_Code_Type_Shoes = 2;
delete from Type_Shoes where ID_Code_Type_Shoes = 3;

update Type_Season set Title_Season = 'Пятый' where ID_Code_Type_Season = 1;
delete from Type_Season where ID_Code_Type_Season = 1;

update Employer set Name_Employer = 'Виталий' where ID_Code_Employer = 3;
delete from Employer where ID_Code_Employer = 2;

update Courier set Formation_Act = '335676' where ID_Code_Courier = 1;
delete from Courier where ID_Code_Courier = 1;

update Sale set Receipt_Number = '12' where ID_Code_Sale = 2;
delete from Sale where ID_Code_Sale = 1;

SELECT Title as "Название типа обуви" from type_shoes where Title like '%яя';
Select Name_Employer as "Имя работника", Surname_Employer as "Фамилия работника" from Employer where Name_Employer like '%я';
Select Title_Season as "Название сезона" from Type_Season where Title_Season like '%ый';

create or replace view Shoes_Market_Place_List ("Название продукта", "Название сезона", "гарантийный период Модели","Название типа обуви","Количество","Стоимость")
as
	select Title_Product as "Название продукта", Title_Season as "Название сезона", Warranty_Period as "Название модели", Title_Type_Shoes as "Название типа обуви", Quantity_Product as "Количество", Amount_Product as "Стоимость" from Product
		inner join Type_Shoes on Code_Type_Shoes_ID = ID_Code_Type_Shoes 
		inner join Type_Season on Code_Type_Season_ID = ID_Code_Type_Season
		inner join Models on Code_Models_ID = ID_Code_Models
		inner join Type_Product on Code_Type_Product_ID = ID_Code_Type_Product;
select * from Shoes_Market_Place_List;

create or replace view Shoes_Buy_List ("Номер Заказа","Итоговая цена","Откуда доставка", "Куда доставка", "Номер акта", "Номер карты покупателя")
as
	select Number_Orders as "Номер заказа", Total_Price as "Итоговая цена", Where_From_Couriel as "Откуда доставка", Where_Courier as "Куда доставка", Formation_Act as "Номер акта", Numbers as "Номер карты покупателя" from Orders
    inner join bank_card_details on Code_bank_card_details_ID = ID_Code_bank_card_details
    inner join Courier on Code_Courier_ID = ID_Code_Courier;
select * from Shoes_Buy_List;

create or replace view Shoes_Person_Info("Имя покупателя", "Фамилия покупателя", "Дата доставки", "Контактный телефон", "Адрес элк.почты", "ЦВВ код", "Номер банковской карты")
as
	select Name_Buyer as "Имя покупателя", Surname_Buyer as "Фамилия покупателя", End_Date as "Дата доставки",Contact_Phone_Number as "Контактный телефон", Email_Addres as "Адрес элк.почты", CVV as "ЦВВ код", Numbers as "Номер банковской карты" from Bank_card_details
		inner join Buyer on Code_Buyer_ID = ID_Code_Buyer;
select * from Shoes_Person_Info;

create or replace view Shoes_Remove_List ("Название компании", "Название продукции", "Количество продукции", "Цена продукции")
as
	select Title_Structured as "Название компании", Title_Product as "Название продукции", Quantity_Product as "Количество продукции", Amount_Product as "Цента продукции" from Structured
	inner join Product on Code_Product_ID = ID_Code_Product
	inner join Orders on Code_Orders_ID = ID_Code_Orders;
select * from Shoes_Remove_List;

create or replace view New_Buyer_Sale_List ("Номер сметы", "Номер контракта", "Имя работника", "Фамилия работника")
as
	select Estimate_Number as "Номер сметы",Contract_Number_Estimate as "Номер контракта", Name_Employer as "Имя работника", Surname_Employer as "Фамилия работника" from Estimate 
	inner join Employer on Code_Employer_ID = ID_Code_Employer;
select * from New_Buyer_Sale_List;	

create or replace view Finished_Sale_Check_List ("Номер чека", "Номер сметы", "Номер контракта", "Дата продажи", "Номер банковской карты", "Название продукции", "Цена продукции", "Количество продукции")
as
	Select Receipt_Number as "Номер чека", Estimate_Number as "Номер сметы", Contract_Number_Estimate as "Номер контракта", Date_Time_Sale as "Дата продажи", Numbers as "Номер банковской карты", Title_Product as "Название продукции", Amount_Product as "Цена продукции", Quantity_Product as "Количество продукции" from Sale
	inner join Bank_Card_details on Code_bank_card_details_ID = ID_Code_Bank_Card_details
	inner join Product on Code_Product_ID = ID_Code_Product
	inner join Estimate on Code_Estimate_ID = ID_Code_Estimate;
select * from Finished_Sale_Check_List;

SELECT count(*) from SYS.all_views 
where owner = 'SALE_DEV';

CREATE OR REPLACE PROCEDURE Type_Shoes_insert (p_Title_Type_Shoes VARCHAR)
IS
BEGIN
        INSERT INTO Type_Shoes (Title_Type_Shoes)
        VALUES (p_Title_Type_Shoes);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Данный тип обуви уже есть в таблице!');
        COMMIT;
    END;

CREATE OR REPLACE PROCEDURE Type_Shoes_update (p_ID_Code_Type_Shoes INT, p_Title_Type_Shoes VARCHAR)
IS
    BEGIN
        UPDATE Type_Shoes
        SET Title_Type_Shoes = p_Title_Type_Shoes
        WHERE ID_Code_Type_Shoes = p_ID_Code_Type_Shoes;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Данный тип обуви уже есть в таблице!');
        COMMIT;
    END;

CREATE OR REPLACE PROCEDURE Type_Shoes_delete (p_ID_Code_Type_Shoes INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record FROM Product
    WHERE Code_Type_Shoes_ID = p_ID_Code_Type_Shoes;

    IF (p_any_child_record > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Тип обуви не может быть удален, так как в таблице "Продукт" есть связанные данные!');
    ELSE
        DELETE FROM Type_Shoes
        WHERE ID_Code_Type_Shoes = p_ID_Code_Type_Shoes;
    END IF;
    COMMIT;
END;



CREATE OR REPLACE PROCEDURE Buyer_insert (p_Name_Buyer VARCHAR,p_Surname_Buyer VARCHAR,p_Adress VARCHAR,p_CVV INT,p_Contact_Phone_Number VARCHAR,p_Email_Addres VARCHAR)
IS
        BEGIN
        INSERT INTO Buyer (Name_Buyer, Surname_Buyer, Adress, CVV, Contact_Phone_Number, Email_Addres)
        VALUES (p_Name_Buyer, p_Surname_Buyer, p_Adress, p_CVV, p_Contact_Phone_Number, p_Email_Addres);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Данный покупатель уже есть в таблице!');
            COMMIT;
    END;
    
CREATE OR REPLACE PROCEDURE Buyer_update (p_ID_Code_Buyer INT,p_Name_Buyer VARCHAR,p_Surname_Buyer VARCHAR,p_Adress VARCHAR,p_CVV INT,p_Contact_Phone_Number VARCHAR,p_Email_Addres VARCHAR)
IS
BEGIN
        UPDATE Buyer
        SET Name_Buyer = p_Name_Buyer,
            Surname_Buyer = p_Surname_Buyer,
            Adress = p_Adress,
            CVV = p_CVV,
            Contact_Phone_Number = p_Contact_Phone_Number,
            Email_Addres = p_Email_Addres
        WHERE ID_Code_Buyer = p_ID_Code_Buyer;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Данный покупатель уже есть в таблице!');
            COMMIT;
    END;
    
CREATE OR REPLACE PROCEDURE Buyer_delete (p_ID_Code_Buyer INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record FROM Bank_card_details
    WHERE Code_Buyer_ID = p_ID_Code_Buyer;
    IF (p_any_child_record > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Покупатель не может быть удален, так как в таблице "Банк_карт_деталь" есть связанные данные!');
    ELSE
        DELETE FROM Buyer
        WHERE ID_Code_Buyer = p_ID_Code_Buyer;
    END IF;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Type_Season_insert (p_Title_Season VARCHAR)
IS
BEGIN
        INSERT INTO Type_Season (Title_Season)
        VALUES (p_Title_Season);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Данный Сезон уже есть в таблице!');
            COMMIT;
    END;
    
CREATE OR REPLACE PROCEDURE Type_Season_update (p_ID_Code_Type_Season INT,p_Title_Season VARCHAR)
IS
BEGIN
        UPDATE Type_Season SET Title_Season = p_Title_Season WHERE ID_Code_Type_Season = p_ID_Code_Type_Season;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Данный Сезон уже есть в таблице!');
            COMMIT;
    END;

CREATE OR REPLACE PROCEDURE Type_Season_delete (p_ID_Code_Type_Season INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record FROM Product
    WHERE Code_Type_Season_ID = p_ID_Code_Type_Season;

    IF (p_any_child_record > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Сезон не может быть удален, так как в таблице "Продукт" есть связанные данные!');
    ELSE
        DELETE FROM Type_Season
        WHERE ID_Code_Type_Season = p_ID_Code_Type_Season;
    END IF;
    COMMIT;
    END;
    
CREATE OR REPLACE PROCEDURE Type_Product_insert (p_Quantity_Type_Product INT)
IS
BEGIN
        INSERT INTO Type_Product (Quantity_Type_Product)
        VALUES (p_Quantity_Type_Product);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Данный тип продукта уже есть в таблице!');
            COMMIT;
    END;
    
CREATE OR REPLACE PROCEDURE Type_Product_update (p_ID_Code_Type_Product INT, p_Quantity_Type_Product INT)
IS
BEGIN
        UPDATE Type_Product SET Quantity_Type_Product = p_Quantity_Type_Product WHERE ID_Code_Type_Product = p_ID_Code_Type_Product;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Данный тип продукта уже есть в таблице!');
            COMMIT;
    END;
    
CREATE OR REPLACE PROCEDURE Type_Product_delete (p_ID_Code_Type_Product INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record FROM Product WHERE Code_Type_Product_ID = p_ID_Code_Type_Product;
    
    IF (p_any_child_record > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Тип продукта не может быть удален, так как в таблице "Продукт" есть связанные данные!');
    ELSE
        DELETE FROM Type_Product WHERE ID_Code_Type_Product = p_ID_Code_Type_Product;
    END IF;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Manufacturer_insert (p_Title_Manufacturer VARCHAR)
IS
BEGIN
    INSERT INTO Manufacturer (Title_Manufacturer)
    VALUES (p_Title_Manufacturer);
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данный производитель уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Manufacturer_update (p_ID_Code_Manufacturer INT, p_Title_Manufacturer VARCHAR)
IS
BEGIN
    UPDATE Manufacturer SET Title_Manufacturer = p_Title_Manufacturer WHERE ID_Code_Manufacturer = p_ID_Code_Manufacturer;
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данный производитель уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Manufacturer_delete (p_ID_Code_Manufacturer INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record FROM Models WHERE Code_Manufacturer_ID = p_ID_Code_Manufacturer;
    
    IF (p_any_child_record > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Производитель не может быть удален, так как в таблице "Модель" есть связанные данные!');
    ELSE
        DELETE FROM Manufacturer WHERE ID_Code_Manufacturer = p_ID_Code_Manufacturer;
    END IF;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Courier_insert (p_Where_From_Couriel VARCHAR,p_Where_Courier VARCHAR,p_Formation_Act INT)
IS
BEGIN
    INSERT INTO Courier (Where_From_Couriel, Where_Courier, Formation_Act)
    VALUES (p_Where_From_Couriel, p_Where_Courier, p_Formation_Act);
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные курьера уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Courier_update (p_ID_Code_Courier INT,p_Where_From_Couriel VARCHAR,p_Where_Courier VARCHAR,p_Formation_Act INT)
IS
BEGIN
    UPDATE Courier
    SET Where_From_Couriel = p_Where_From_Couriel,
        Where_Courier = p_Where_Courier,
        Formation_Act = p_Formation_Act
    WHERE ID_Code_Courier = p_ID_Code_Courier;
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные курьера уже есть в таблице!');
        COMMIT;
END;


CREATE OR REPLACE PROCEDURE Courier_delete (p_ID_Code_Courier INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record FROM Orders WHERE Code_Courier_ID = p_ID_Code_Courier;
    
    IF p_any_child_record > 0 THEN
        DBMS_OUTPUT.PUT_LINE('Данные курьера не могут быть удалены, так как в таблице "Orders" есть связанные данные!');
    ELSE
        DELETE FROM Courier WHERE ID_Code_Courier = p_ID_Code_Courier;
    END IF;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Employer_insert(p_Name_Employer VARCHAR, p_Surname_Employer VARCHAR)
IS
BEGIN
    INSERT INTO Employer (Name_Employer, Surname_Employer)
    VALUES (p_Name_Employer, p_Surname_Employer);
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные сотрудника уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Employer_update(p_ID_Code_Employer INT, p_Name_Employer VARCHAR, p_Surname_Employer VARCHAR)
IS
BEGIN
    UPDATE Employer SET Name_Employer = p_Name_Employer, Surname_Employer = p_Surname_Employer
    WHERE ID_Code_Employer = p_ID_Code_Employer;
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные сотрудника уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Employer_delete(p_ID_Code_Employer INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record FROM Models
    WHERE Code_Employer_ID = p_ID_Code_Employer;
    
    IF (p_any_child_record > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Данные сотрудника не могут быть удалены, так как в таблице "Модель" есть связанные данные!');
    ELSE
        DELETE FROM Employer
        WHERE ID_Code_Employer = p_ID_Code_Employer;
    END IF;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Models_insert(p_sizes INT, p_image VARCHAR, p_quantity_model INT, p_warranty_period INT, p_code_manufacturer_id INT, p_code_employer_id INT)
IS
BEGIN
    INSERT INTO Models (Sizes, Image, Quantity_Model, Warranty_Period, Code_Manufacturer_ID, Code_Employer_ID)
    VALUES (p_sizes, p_image, p_quantity_model, p_warranty_period, p_code_manufacturer_id, p_code_employer_id);
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные модели уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Models_update(p_id_code_models INT, p_sizes INT, p_image VARCHAR, p_quantity_model INT, p_warranty_period INT, p_code_manufacturer_id INT, p_code_employer_id INT)
IS
BEGIN
    UPDATE Models
    SET Sizes = p_sizes,
        Image = p_image,
        Quantity_Model = p_quantity_model,
        Warranty_Period = p_warranty_period,
        Code_Manufacturer_ID = p_code_manufacturer_id,
        Code_Employer_ID = p_code_employer_id
    WHERE ID_Code_Models = p_id_code_models;
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные модели уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Models_delete(p_id_code_models INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record FROM Product
    WHERE Code_Models_ID = p_id_code_models;
    
    IF (p_any_child_record > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Данные модели не могут быть удалены, так как в таблице "Продукт" есть связанные данные!');
    ELSE
        DELETE FROM Models
        WHERE ID_Code_Models = p_id_code_models;
    END IF;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Product_insert(p_amount_product INT, p_title_product VARCHAR, p_quantity_product INT, p_code_type_shoes_id INT, p_code_type_season_id INT, p_code_models_id INT, p_code_type_product_id INT)
IS
BEGIN
    INSERT INTO Product (Amount_Product, Title_Product, Quantity_Product, Code_Type_Shoes_ID, Code_Type_Season_ID, Code_Models_ID, Code_Type_Product_ID)
    VALUES (p_amount_product, p_title_product, p_quantity_product, p_code_type_shoes_id, p_code_type_season_id, p_code_models_id, p_code_type_product_id);
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные продукта уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Product_update(p_id_code_product INT, p_amount_product INT, p_title_product VARCHAR, p_quantity_product INT, p_code_type_shoes_id INT, p_code_type_season_id INT, p_code_models_id INT, p_code_type_product_id INT)
IS
BEGIN
    UPDATE Product
    SET Amount_Product = p_amount_product,
        Title_Product = p_title_product,
        Quantity_Product = p_quantity_product,
        Code_Type_Shoes_ID = p_code_type_shoes_id,
        Code_Type_Season_ID = p_code_type_season_id,
        Code_Models_ID = p_code_models_id,
        Code_Type_Product_ID = p_code_type_product_id
    WHERE ID_Code_Product = p_id_code_product;
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные продукта уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Product_delete(p_id_code_product INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record FROM Structured
    WHERE Code_Product_ID = p_id_code_product;
    
    IF (p_any_child_record > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Данные продукта не могут быть удалены, так как в таблице "Структура" есть связанные данные!');
    ELSE
        DELETE FROM Product
        WHERE ID_Code_Product = p_id_code_product;
    END IF;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Bank_card_details_insert(p_numbers INT, p_code_buyer_id INT)
IS
BEGIN
    INSERT INTO Bank_card_details (Numbers, Code_Buyer_ID)
    VALUES (p_numbers, p_code_buyer_id);
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные банковской карты уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Bank_card_details_update(p_id_code_bank_card_details INT, p_numbers INT, p_code_buyer_id INT)
IS
BEGIN
    UPDATE Bank_card_details
    SET Numbers = p_numbers,
        Code_Buyer_ID = p_code_buyer_id
    WHERE ID_Code_bank_card_details = p_id_code_bank_card_details;
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные банковской карты уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Bank_card_details_delete(p_id_code_bank_card_details INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record FROM Orders
    WHERE Code_Bank_card_details_ID = p_id_code_bank_card_details;
    
    IF (p_any_child_record > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Данные банковской карты не могут быть удалены, так как в таблице "Orders" есть связанные данные!');
    ELSE
        DELETE FROM Bank_card_details
        WHERE ID_Code_Bank_card_details = p_id_code_bank_card_details;
    END IF;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Orders_insert (p_number_orders INT, p_code_bank_card_details_id INT, p_code_courier_id INT)
IS
BEGIN
    INSERT INTO Orders (Number_Orders, Code_bank_card_details_ID, Code_Courier_ID)
    VALUES (p_number_orders, p_code_bank_card_details_id, p_code_courier_id);
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данный заказ уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Orders_update (p_id_code_orders INT, p_number_orders INT, p_code_bank_card_details_id INT, p_code_courier_id INT)
IS
BEGIN
    UPDATE Orders
    SET Number_Orders = p_number_orders,
        Code_bank_card_details_ID = p_code_bank_card_details_id,
        Code_Courier_ID = p_code_courier_id
    WHERE ID_Code_Orders = p_id_code_orders;
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данный заказ уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Orders_delete (p_id_code_orders INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record
    FROM Marriage_Fixation
    WHERE Code_Orders_ID = p_id_code_orders;

    IF (p_any_child_record > 0) THEN
        DBMS_OUTPUT.PUT_LINE('Данный заказ не может быть удален, так как в таблице "Marriage_Fixation" есть связанные данные!');
    ELSE
        DELETE FROM Orders
        WHERE ID_Code_Orders = p_id_code_orders;
    END IF;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Marriage_Fixation_insert (p_date_time_marriage_fixation DATE, p_code_orders_id INT)
IS
BEGIN
    INSERT INTO Marriage_Fixation (Date_Time_Marriage_Fixation, Code_Orders_ID)
    VALUES (p_date_time_marriage_fixation, p_code_orders_id);
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данная фиксация брака уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Marriage_Fixation_update (p_id_code_marriage_fixation INT, p_date_time_marriage_fixation DATE, p_code_orders_id INT)
IS
BEGIN
    UPDATE Marriage_Fixation
    SET Date_Time_Marriage_Fixation = p_date_time_marriage_fixation,
        Code_Orders_ID = p_code_orders_id
    WHERE ID_Code_Marriage_Fixation = p_id_code_marriage_fixation;
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данная фиксация брака уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Marriage_Fixation_delete (p_id_code_marriage_fixation INT)
IS
BEGIN
    DELETE FROM Marriage_Fixation
    WHERE ID_Code_Marriage_Fixation = p_id_code_marriage_fixation;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Structured_insert(p_title_structured VARCHAR, p_code_product_id INT, p_code_orders_id INT)
IS
BEGIN
    INSERT INTO Structured (Title_Structured, Code_Product_ID, Code_Orders_ID)
    VALUES (p_title_structured, p_code_product_id, p_code_orders_id);
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данная структура уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Structured_update(p_id_code_structured INT, p_title_structured VARCHAR, p_code_product_id INT, p_code_orders_id INT)
IS
BEGIN
    UPDATE Structured
    SET Title_Structured = p_title_structured,
        Code_Product_ID = p_code_product_id,
        Code_Orders_ID = p_code_orders_id
    WHERE ID_Code_Structured = p_id_code_structured;
    
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данная структура уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Structured_delete(p_id_code_structured INT)
IS
BEGIN
    DELETE FROM Structured
    WHERE ID_Code_Structured = p_id_code_structured;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Estimate_insert (p_estimate_number INT, p_contract_number_estimate INT, p_code_employer_id INT)
IS
BEGIN
    INSERT INTO Estimate (Estimate_Number, Contract_Number_Estimate, Code_Employer_ID)
    VALUES (p_estimate_number, p_contract_number_estimate, p_code_employer_id);

    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данная смета уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Estimate_update (p_id_code_estimate INT, p_estimate_number INT, p_contract_number_estimate INT, p_code_employer_id INT)
IS
BEGIN
    UPDATE Estimate
    SET Estimate_Number = p_estimate_number,
        Contract_Number_Estimate = p_contract_number_estimate,
        Code_Employer_ID = p_code_employer_id
    WHERE ID_Code_Estimate = p_id_code_estimate;

    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данная смета уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Estimate_delete (p_id_code_estimate INT)
IS
    p_any_child_record INT;
BEGIN
    SELECT COUNT(*) INTO p_any_child_record
    FROM Act
    WHERE Code_Estimate_ID = p_id_code_estimate;

    IF p_any_child_record > 0 THEN
        DBMS_OUTPUT.PUT_LINE('Данная смета не может быть удалена, так как в таблице "Акт" есть связанные данные!');
    ELSE
        DELETE FROM Estimate
        WHERE ID_Code_Estimate = p_id_code_estimate;
        END IF;
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Act_insert (p_numbers INT,p_date_time_act DATE,p_code_estimate_id INT,p_code_product_id INT)
IS
BEGIN
    INSERT INTO Act (Numbers, Date_Time_Act, Code_Estimate_ID, Code_Product_ID)
    VALUES (p_numbers, p_date_time_act, p_code_estimate_id, p_code_product_id);
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данный акт уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Act_update (p_id_code_act INT,p_numbers INT,p_date_time_act DATE,p_code_estimate_id INT,p_code_product_id INT)
IS
BEGIN
    UPDATE Act
    SET Numbers = p_numbers,
        Date_Time_Act = p_date_time_act,
        Code_Estimate_ID = p_code_estimate_id,
        Code_Product_ID = p_code_product_id
    WHERE ID_Code_Act = p_id_code_act;
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данный акт уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Act_delete (p_id_code_act INT)
IS
BEGIN
    DELETE FROM Act
    WHERE ID_Code_Act = p_id_code_act;
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Reception_insert (p_contract_number_reception INT,p_email_address VARCHAR,p_telephone VARCHAR,p_code_estimate_id INT,p_code_product_id INT)
IS
BEGIN
    INSERT INTO Reception (Contract_Number_Reception, Email_Address, Telephone, Code_Estimate_ID, Code_Product_ID)
    VALUES (p_contract_number_reception, p_email_address, p_telephone, p_code_estimate_id, p_code_product_id);
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данный прием уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Reception_update (p_id_code_reception INT,p_contract_number_reception INT,p_email_address VARCHAR,p_telephone VARCHAR,p_code_estimate_id INT,p_code_product_id INT)
IS
BEGIN
    UPDATE Reception
    SET Contract_Number_Reception = p_contract_number_reception,
        Email_Address = p_email_address,
        Telephone = p_telephone,
        Code_Estimate_ID = p_code_estimate_id,
        Code_Product_ID = p_code_product_id
    WHERE ID_Code_Reception = p_id_code_reception;
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данный прием уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Reception_delete (p_id_code_reception INT)
IS
BEGIN
    DELETE FROM Reception
    WHERE ID_Code_Reception = p_id_code_reception;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE Sale_insert (p_receipt_number INT, p_date_time_sale DATE, p_code_bank_card_details_id INT, p_code_product_id INT, p_code_estimate_id INT)
IS
BEGIN
    INSERT INTO Sale (Receipt_Number, Date_Time_Sale, Code_bank_card_details_ID, Code_Product_ID, Code_Estimate_ID)
    VALUES (p_receipt_number, p_date_time_sale, p_code_bank_card_details_id, p_code_product_id, p_code_estimate_id);
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные продажи уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Sale_update (p_id_code_sale INT, p_receipt_number INT, p_date_time_sale DATE, p_code_bank_card_details_id INT, p_code_product_id INT, p_code_estimate_id INT)
IS
BEGIN
    UPDATE Sale
    SET Receipt_Number = p_receipt_number,
        Date_Time_Sale = p_date_time_sale,
        Code_bank_card_details_ID = p_code_bank_card_details_id,
        Code_Product_ID = p_code_product_id,
        Code_Estimate_ID = p_code_estimate_id
    WHERE ID_Code_Sale = p_id_code_sale;
    EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Данные продажи уже есть в таблице!');
        COMMIT;
END;

CREATE OR REPLACE PROCEDURE Sale_delete (p_id_code_sale INT)
IS
BEGIN
    DELETE FROM Sale
    WHERE ID_Code_Sale = p_id_code_sale;
    COMMIT;
END;

call Type_Season_insert ('Шестой');
select * from Type_Season;

call Type_Shoes_update (3, 'Селеконовый');
select * from Type_Shoes;

call Type_Season_delete (21);
select * from Type_Season;

call Type_Shoes_delete (3);
select * from Type_Shoes;

call Employer_insert(' ');
select * from Employer;

SELECT count(*) FROM user_procedures 
WHERE object_type = 'PROCEDURE';

Select Title_Manufacturer as "Название производителя", length(Title_Manufacturer) as "Количество символов", count(Code_Manufacturer_ID) as "Количество постовляемой продукции" from Models
inner join Manufacturer on Code_Manufacturer_ID = ID_Code_Manufacturer
inner join Employer on Code_Employer_ID = ID_Code_Employer
group by Title_Manufacturer;

Select Title_Product as "Самый дорогой товар", sum(Amount_Product) as "Цена товара" from Product
group by Title_Product
having sum(Amount_Product) > 1 fetch first 3 rows only;

Select Concat('Дата фиксации брака: ',Date_time_Marriage_Fixation, ', Номер заказа: ',Number_Orders) as "Данные заказа", Round(avg(Total_Price),2) as "Средняя цена итоговой стоимости" from Marriage_Fixation
inner join Orders on Code_Orders_ID = ID_Code_Orders
group by Concat('Дата фиксации брака: ',Date_time_Marriage_Fixation, ', Номер заказа: ',Number_Orders);

SELECT 'Дата фиксации брака: ' || TO_CHAR(Date_time_Marriage_Fixation, 'DD.MM.YYYY') || ', Номер заказа: ' || Number_Orders AS "Данные заказа",
       ROUND(AVG(Total_Price), 2) AS "Средняя цена итоговой стоимости" FROM Marriage_Fixation
INNER JOIN Orders ON Code_Orders_ID = ID_Code_Orders
GROUP BY 'Дата фиксации брака: ' || TO_CHAR(Date_time_Marriage_Fixation, 'DD.MM.YYYY') || ', Номер заказа: ' || Number_Orders;

Select Title_Product as "Название товара", case
	when Amount_Product <3000 then 'Дешевый товар'
	when Amount_Product between 3000 and 5000 then 'Доступный товар'
	when Amount_Product > 5000 then 'Дорогой товар'
	end as "Степень дороговизны" from Product;

Select Max(Amount_Product) as "Самый дорогой товар", Min(Amount_Product) as "Самый дешевый товар" from Product;

Select to_char(Date_time_Marriage_Fixation,'dd.MM.yyyy')  as "Дата заключения договора" , 
to_char(Date_time_Marriage_Fixation + interval '1 year','dd.MM.yyyy')  as "Дата окончания договора" , 
date_part('QUARTER',Date_time_Marriage_Fixation + interval '1 year')  as "Квартал окончания договора" from Marriage_Fixation;

SELECT TO_CHAR(Date_time_Marriage_Fixation, 'DD.MM.YYYY') AS "Дата заключения договора",
       TO_CHAR(Date_time_Marriage_Fixation + INTERVAL '1' YEAR, 'DD.MM.YYYY') AS "Дата окончания договора",
       TO_CHAR(Date_time_Marriage_Fixation + INTERVAL '1' YEAR, 'Q') AS "Квартал окончания договора"
FROM Marriage_Fixation;

Select distinct(Date_time_Marriage_Fixation) from Marriage_Fixation;

Select ROW_NUMBER() over(order by Date_Time_Marriage_Fixation) as "№ строки", Number_Orders as "Номер заказа" from Marriage_Fixation
inner join Orders on Code_Orders_ID = ID_Code_Orders;

create or replace function Check_Title (p_Title_Product VARCHAR)
return INT
	IS p_Amount_Product INT;
	begin
		SELECT sum(Amount_Product * Quantity_Product)INTO p_Amount_Product from Product
		inner join Type_Shoes on Code_Type_Shoes_ID = ID_Code_Type_Shoes
		inner join Type_Season on Code_Type_Season_ID = ID_Code_Type_Season
		inner join Models on Code_Models_ID = ID_Code_Models
		inner join Type_Product on Code_Type_Product_ID = ID_Code_Type_Product
		where Title_Product = p_Title_Product;
		return (p_Amount_Product);
	end;
SELECT Check_Title ('Гуччишуси') FROM DUAL;

SELECT count(*) FROM user_objects WHERE
object_type = 'FUNCTION';
